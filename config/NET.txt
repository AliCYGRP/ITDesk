Scaffold-DbContext "Server=CYG403\SQLEXPRESS;Database=ITDesk;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

Controllers
-LoginController (With Read Write Action)

******
appsettings.json

{
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "Jwt": {
    "Key": "ITDeskSecret1234",
    "Issuer": "Team-C"
  },
  "AllowedHosts": "*",
  "AllowedHosts": "*"
}
******
startup.cs

add below content after addMvc() line

            services.AddCors(options => options.AddPolicy("AllowAll", p => p.AllowAnyOrigin()
                                                                   .AllowAnyMethod()
                                                                    .AllowAnyHeader()));
            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            .AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = Configuration["Jwt:Issuer"],
                    ValidAudience = Configuration["Jwt:Issuer"],
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Jwt:Key"]))
                };
            });
            services.AddDbContext<ITDeskContext>(o => o.UseSqlServer("Server=CYG403\\SQLEXPRESS;Database=ITDesk;Trusted_Connection=True;"));




 888888
after user.hsts bracket end

            app.UseCors(b => b.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin().AllowCredentials());
            app.UseHttpsRedirection();
            app.UseAuthentication();
            app.UseMvc();
8888888
********



        [HttpGet]
        [Route("[action]")]
        // GET: api/DeviceInfo/data?isAssigned=0&&CategoryId=2
        public ActionResult data(bool isAssigned, int CategoryId)
        {
            if (isAssigned == true)
            {
                var query = (from D in _context.DeviceInfo
                             join E in _context.EmployeeInfo on D.EmployeeId equals E.EmployeeId
                             where D.IsAssigned == isAssigned && D.CategoryId == CategoryId
                             select new
                             {
                                 D.UniqueCode,
                                 D.DeviceName,
                                 D.AssignedDate,
                                 E.EmployeeEmail,
                                 D.AssignedBy
                             }).ToList();
            } else
            {
                var query = (from D in _context.DeviceInfo
                             where D.IsAssigned == isAssigned && D.CategoryId == CategoryId
                             select new
                             {
                                 D.UniqueCode,
                                 D.DeviceName,
                                 D.AssignedDate,
                                 D.AssignedBy
                             }).ToList();
            }

            return Ok(query);
        }

            foreach (var item in query.ToList())
            {
                objModel.Add(
                    new DeviceResponse
                    {
                        UniqueCode = item.UniqueCode.ToString(),
                        DeviceName = item.UniqueCode.ToString(),
                        AssignedDate = item.AssignedDate,
                        EmployeeEmail = item.EmployeeEmail.ToString(),
                        AssignedBy = item.AssignedBy.ToString()
                    });

            }